
# モジュール

* モジュールからインスタンスを作成することはできない。
* ほかのモジュールやクラスを継承することはできない。

モジュールをクラスにincludeする
　モジュールをクラスにincludeして機能を追加することをミックスインと言います。また、1つのクラスに複数のモジュールをミックスインすることもできます。

モジュールをextendする
　extendを使うと、モジュール内のメソッドをそのクラスの特異メソッド（つまりクラスメソッド）にすることができます。

includeされたモジュールの有無を確認する

* クラスオブジェクトに対してinclude?メソッドを呼ぶと、引数で渡したモジュールがincludeされているかどうかがわかります。
* included_modulesメソッドを呼ぶと、includeされているモジュールの配列が返ります。

Enumerableモジュール
　配列やハッシュ、範囲（Range）など、何かしらの繰り返し処理ができるクラスにincludeされているモジュールです。
例）map   select   find   countメソッドなど

Comparableモジュール
　比較演算を可能にする（つまり値の大小を判定できるようにする）モジュールです。
例）<   <=   ==   >   >=   between?

Kernelモジュール
　KernelモジュールはObjectクラスに includeされているため、すべてのクラスはKernelモジュールのメソッドが使えるようになっている
例）puts   p   pp   print   require   loop

モジュールとインスタンス変数
　モジュール内で定義したメソッドの中でインスタンス変数を読み書きすると、include先のクラスのインスタンス変数を読み書きしたことと同じになります。

モジュールを利用した名前空間の作成

* モジュール構文の中にクラス定義を書くと「そのモジュールに属するクラス」という意味になるため、同名のクラスがあっても外側のモジュール名さえ異なっていれば名前の衝突は発生しなくなります。

* モジュールに属するクラスを参照する際は“モジュール名::クラス名”のように、::でモジュール名とクラス名を区切ります。

モジュールに特異メソッドを定義する

　includeやextendを使うとモジュールのメソッドをインスタンスメソッドやクラスメソッドとして追加することができます。しかし、場合によってはわざわざほかのクラスに組み込まなくてもモジュール単体でそのメソッドを呼び出したい、と思うケースがあります。こういう場合はモジュール自身に特異メソッドを定義すれば、直接“モジュール名.メソッド名”という形でそのメソッドを呼び出すことができます。

● module_functionメソッド
　モジュールではミックスインとしても使えて、なおかつモジュールの特異メソッドとしても使える、一石二鳥なメソッドを定義することもできます。両方で使えるメソッドを定義する場合はmodule_functionメソッドを使って、対象のメソッド名を指定します。

モジュールに定数を定義する
　クラスに定数を定義できたように、モジュールにも定数を定義することができます。定義のしかたや参照のしかたはクラスの場合と同じです。


