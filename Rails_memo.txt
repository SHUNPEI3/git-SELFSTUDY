DWC ONLINE メモ


画像投稿実装 ☆☆☆

① ActiveStorageをインストール
  ・$ rails active_storage:install → $ rails db:migrate を実行

② 画像投稿するモデルに以下を追加
  ・has_one_attached :image

③ 画像のサイズ変更を行うGemを導入
  ・gemファイルのimage_processingのコメントアウトを外す
    # gem 'image_processing', '~>1.2’ → gem 'image_processing', '~>1.2'
  ・bundle installを実行する

④ config/environments/development.rbに以下を追加
  ・config.active_job.queue_adapter = :inline

⑤ メソッドを設定
  ・画像投稿するモデルに画像投稿メソッドを追加する＋引数に設定した値に画像のサイズを変換できるようにも

  def get_image(width, height)
    unless image.attached?
      file_path = Rails.root.join('app/assets/images/○○○.jpg')
      profile_image.attach(io: File.open(file_path), filename: 'default-image.jpg', content_type: 'image/jpeg')
    end
    profile_image.variant(resize_to_limit: [width, height]).processed
  end



device機能実装時の各種設定 ☆☆☆

 ● 初期状態のdevise から、名前（name）を保存できるように修正
   ⑴ migration ファイルの修正
     名前（name）を保存するカラムがないため、カラムの追加をする
   ⑵ Viewファイルの実装&修正
     rails g devise:viewsでView ファイルを作成 → ユーザ登録の際に ”name” を登録するためのフォーム(form_with)を追加
   ⑶ usersコントローラーファイルの作成&編集
     指定したデータ（name）を保存できるよう、ApplicationControllerに以下を記載する
     例）
       before_action :configure_permitted_parameters, if: :devise_controller?
       protected
       def configure_permitted_parameters
         devise_parameter_sanitizer.permit(:sign_up, keys: [:name]) ←   (:deviseの処理名, keys: [:許可するキー])
       end

 ● ログイン時に名前（name）を入力してログインできるように修正
  ・deviseの設定ファイルであるconfig/initializers/devise.rbファイルの以下を修正
     ⑴ # config.authentication_keys = [:email] のコメントアウトを外す
     ⑵ config.authentication_keys = [:name] に修正

 ● サインイン後、ログアウト後の遷移先を指定
  ・ApplicationControllerに以下を記載する
     例）def after_sign_in_path_for(resource)  または  after_sign_out_path_for(resource)
           ○○○○○_path
         end

 ● サインアップ(新規登録後)のページ遷移先設定方法
   ※参考サイト：https://qiita.com/akkyta/items/ea7ffdb8159a797632a4

 ● 権限の設定をする ＝ ログイン認証が成功していないと、特定以外の画面（ログインと新規登録は除く）は表示できない仕様にする
  ・ApplicationControllerに以下を記載する
     例）  before_action :authenticate_user!, except: [:○○○]
      ※exceptは指定したアクションをbefore_actionの対象から外すことができる。

 ● ログイン済み他ユーザーからのアクセスを制限
    before_action:  メソッド名を設定する
￼
 ● 管理者(Admin)アカウントの実装方法
  ※参考サイト：https://onl.sc/SG3E8zy

 ● 管理者(Admin)ログイン/ログアウト後のページ遷移先設定
  ※参考サイト：https://qiita.com/nao0725/items/93f5400c48c957c50de7



Bootstrapの導入方法 ☆☆☆

 ① yarn add jquery bootstrap@4.5 popper.js を実行 ← jqueryと bootstrap@4.5と popper.jsの計３ファイルをダウンロード？

 ② config/webpack/environment.jsを編集 ← jQueryを使用するための設定

   const webpack = require('webpack')
   environment.plugins.prepend(
     'Provide',
     new webpack.ProvidePlugin({
       $: 'jquery/src/jquery',
       jQuery: 'jquery/src/jquery',
       Popper: 'popper.js'
     })
   )

 ③ app/javascriptの配下にstylesheetsフォルダを作成、stylesheetsフォルダの配下にapplication.scssファイルを作成して、以下を記載する

   @import '~bootstrap/scss/bootstrap';

 ④ app/javascript/packs/application.jsに下記を追記

   import "jquery";    ← jQueryを使用するための設定
   import "popper.js";   ← popper.jsを使用するための設定
   import "bootstrap";   ← bootstrapを使用するための設定
   import "../stylesheets/application"

 ⑤ app/views/layouts/application.html.erbを修正

  【変更前】
   <%= stylesheet_link_tag 'application', media: 'all', 'data-turbolinks-track': 'reload' %>
  【変更後】
   <%= stylesheet_pack_tag 'application', media: 'all', 'data-turbolinks-track': 'reload' %>



いいね機能実装 ☆☆

〈ポイント〉メソッドの設定
 ・いいねしているかの判定メソッドをBookモデル（親モデル）に記載
   例）def favorited_by?(user)
        favorites.exists?(user_id: user.id)
       end

〈ポイント〉routesの設定
 ・bookにネストさせる
 ・resources ではなくresourceを使用

〈ポイント〉favoritesコントローラーファイルにアクションを定義
 ・destroyアクションはuser_idとbook_idの２つを削除する必要あり
   例）book = Book.find(params[:book_id])
        favorite = current_user.favorites.find_by(book_id: book.id)
       favorite.destroy



コメント機能実装 ☆☆

〈ポイント〉Viewファイルの編集
       ■コメントをcreateする場合： form_withに対して、配列でインスタンス変数を2つ指定する
   例）<%= form_with model: [@book, @book_comment] do |f| %>

       ■コメントをdeleteする場合： link_toに対して、パスを2つ指定する
   例）<%= link_to "削除", book_book_comment_path(book_comment.book.id, book_comment.id), method: :delete %>

〈ポイント〉book_commentコントローラーファイルにアクションを定義
 ・destroyアクションは主キーのみ削除させる
   例）BookComment.find(params[:id]).destroy



フォロー・フォロワー機能実装 ☆☆
 ※参考URL：https://qiita.com/kazukimatsumoto/items/14bdff681ec5ddac26d1

 ① Relationshipモデル（中間テーブル）を作成

  〈ポイント〉カラムは”follower_id”と”followed_id”

《イメージ図》
￼

 ② アソシエーションを設定
  ⑴ Relationshipモデル（中間テーブル）には以下を記載

    belongs_to :following, class_name: "User" ←   フォローする側
    belongs_to :follower, class_name: "User"   ←   フォローされる側

 〈ポイント〉belongs_to: ○○○ には、参照先したい擬似テーブル名を記載
   メモ：本当はbelongs_to: userとしたいのだが、フォローする側とフォローされる側のどちらともUserのため、名前の重複が起きてしまい記述できない
         そのため、架空のテーブル名を設定しなければならない
 〈ポイント〉class_name:”モデル名（実在するモデル）”と記載することで、実在するモデル内のテーブルからデータを取得できる

   例）belongs_to 変更したい親モデル名, class_name: "元々の親モデル名"

  ⑵ Userモデルには以下を記載

   has_many :active_relationships, class_name: "Relationship”, foreign_key: :following_id    ←   フォローする側
   has_many :passive_relationships, class_name: "Relationship”, foreign_key: :follower_id    ←   フォローされる側

 〈ポイント〉has_many: ○○○ には、参照先したい擬似テーブル名を記載
   メモ：本当はhas_many: relationshipとしたいのだが、フォローする側とフォローされる側のどちらともRelationshipのため、名前の重複が起きてしまい記述できない
      そのため、架空のテーブル名を設定しなければならない
   メモ：Relationshipは中間テーブルの属性を持つため、設定した擬似テーブルも中間テーブルの扱いとなる
 〈ポイント〉class_name:”モデル名（実在するモデル）”を記載
 〈ポイント〉foreign_key : は、参照先のテーブルの外部キーカラム名を指定できる

  ⑶ フォロー・フォロワーの一覧画面取得のため、合わせてUserモデルに下記も記載する。

   has_many :followings, through: :active_relationships, source: :follower  ←   フォローする側
   has_many :followers, through: :passive_relationships, source: :following  ←   フォローされる側

 〈ポイント〉has_many: ○○○ には、架空のワードを記載 → このワードを使うと一覧画面が取得できる
 〈ポイント〉through: :○○○には、⑵で設定した擬似テーブル名（中間テーブル）を記載
 〈ポイント〉source: :○○○には、⑴で設定した擬似テーブル名（参照先のテーブル名、つまりはフォローする側ならフォローされる側のテーブル名）を記載

 ③ メソッドの設定
  フォローしているかの判定メソッドをUserモデルに記載（いいね機能と同様？）
   例）def following?(user)
            followings.include?(user)
          end

  〈ポイント〉メソッドを定義する際はアソシエーションの親側に記載する

 ④ routesファイルにルーティングを定義
  ・userにネストさせる
  ・resources ではなくresourceを使用（いいね機能と同じ）
  ・フォロー/フォロワー一覧表示用のルートも設定

 ⑤ Relationshipコントローラーファイルの作成&編集
  ・create/destroy の実装（いいね機能と同じ）
  ・フォロー/フォロワー一覧表示用のアクションも設定
   例）フォロー一覧の場合
      def followings
        user = User.find(params[:user_id])
        @users = user.following_user ←  ②のアソシエーション設定でUserモデルに定義した△△△（架空のワード）を使用する！
      end

 ⑥ Viewファイルの編集
  ・各ページにフォロー/フォロワー数の表示、フォローする/フォロワーを外す のリンクを実装する

 ⑦ Viewファイルの作成（フォロー/フォロワー一覧表示）
  〈ポイント〉@usersをeachメソッドで展開する。※indexファイルと同じ方法
  〈ポイント〉exists?メソッド でフォロー/フォロワー一覧がいない場合を記載する



検索機能実装 ☆☆☆

 ① routesファイルにルーティングを定義

 ② 検索フォームの設置（Viewファイルの編集）

  ⑴ sign_in時のみ表示させる ← user_signed_in?メソッドを使う
  ⑵ form_withにはurl: search_pathを設定
   例）<%= form_with url: search_path, method: :get do |f| %>
  ⑶ f.text_fieldには属性（:content）を設定
  ⑷ f.select（:属性）を使用するとプルダウンが生成される
   ・option_for_selectメソッドで、selectタグの値を設定 ※ハッシュ形式（キー＝表示したい内容、値＝値）で記載
    例）<%= f.select :model, options_for_select({"User"=>"user", "Book"=>"book"}) %>
   ・select（1つ目）には属性（:model）を設定 ※どのモデルを検索対象するのか？
   ・select（2つ目）には属性（:method）を設定 ※どの手法で検索するのか？

 ③ searchコントローラーファイルを作成&アクションを定義

 〈ポイント〉form_withで設定した各属性（content,model,method）をparamsで受け取り、それぞれインスタンス変数へ格納
 〈ポイント〉@modelの中身がBookモデルor Userモデルのどちらを選択しているのか、条件分岐で記載

  例）モデル名.search_for(@content,@method)をインスタンス変数@recordsへ格納

 ④ User,Bookモデルにsearch_forメソッドを定義 ＝検索方法の設定

 〈ポイント〉
  ・self .をつける
  ・methodの中身によって条件分岐で設定
  ・where メソッドを使って@contentの中身とカラム名が一致しているものを探す
   例）def search_for(method, content)
                    if method == “perfect”
                      モデル名.where(カラム名: content)
  ・前方一致 後方一致 部分一致には、LIKE句？とワイルドカード（”%”)を使う
   例）モデル名.where(“カラム名 LIKE ?", “%”+content+”%”)   ※ ％‥‥ 任意の0文字以上の文字列

 ⑤ search Viewファイルの作成&定義

 〈ポイント〉@modelの中身がBookモデルor Userモデルのどちらを選択しているのか、条件分岐で記載
 〈ポイント〉@recordsをeachメソッドで展開する。※indexファイルと同じ方法



非同期通信化 ☆☆

 ① 非同期通信化したい箇所を部分テンプレートで抜き出す

 〈ポイント〉eachメソッド内でのrender処理の場合、ブロック変数を指定する
   例）<%= render "favorites/favorite", book: book %>
 〈ポイント〉変更したい箇所に属性（idやclass)を付与する   ※class属性の場合すべての要素に影響する場合があるため、id属性がおすすめ！
   例）<td id="favorite-buttons-<%= book.id %>"><%= render “○○○○○” %></td>

 ② 非同期通信設定 ＝Ajaxの処理を適用させる

 〈ポイント〉form_with内 に、local: false を追記する → JavaScript形式でリクエストを送る
 〈ポイント〉link_to内に、remote: true を追記する → JavaScript形式でリクエストを送る

 ③ コントローラーファイルの編集
  ・create/destroyアクションのリダイレクト先を削除 or 特定のjsファイルを指定

 ④ jsファイルを作成&定義
  ・指定したセレクタのみHTMLをrenderして部分的に更新する

   例）$(セレクタ).html("<%= j(○○○○○) %>”); ※○○○○○には部分テンプレートファイルを呼び出す記述を記載

 〈ポイント〉ページ内にコメントフォームが適用されている場合は、$("textarea").val(''); でフォームの値を空にできる
 〈ポイント〉インスタンス変数を設定 ← controllerのcreate/destroyアクションで定義されたインスタンス変数が渡される
         例）  $(".favorite-btn").html("<%= j(render 'favorites/favorite-btn', book: @book) %>");

 ⑤ コントローラーファイルのインスタンス変数を定義
  ・jsファイルに渡すためのインスタンス変数を修正、設定



ゲストログイン機能実装  ☆☆☆

 ① sessionsコントローラーファイル（ゲストログイン用）の作成、編集
  ※ログイン機能はsessions_controller.rbに記述されているが、これはGemでインストールされているため、目に見えないファイル
   そのため、ゲストログイン用にDeviseのsessions_controller.rbの機能を継承して実装しなければならない

  ・app/controllersの配下にusersフォルダ → sessions_controller.rbを作成、以下を記載する

     class Users::SessionsController < Devise::SessionsController
       def guest_sign_in
         user = User.guest ← 後ほどメソッドを定義
         sign_in user
         redirect_to ○○○_path(user.id)
       end
     end

 ② routesファイルにルーティングを定義

 〈ポイント〉httpメソッドは”post”
 〈ポイント〉devise_scope:user を使いネストさせる

 ③ Userモデルにguestメソッドを定義

  def self.guest
       find_or_create_by!(name: 'guestuser' ,email: 'guest@example.com') do |user|
         user.password = SecureRandom.urlsafe_base64
         user.name = "guestuser"
       end
     end

 〈ポイント〉find_or_create_by(条件)は、(条件)としたデータが存在するかを判断した上で「trueの場合→そのデータを返す」「falseの場合→新規作成」の処理をする
 〈ポイント〉find_or_create_by!の「!」を付与すること
 〈ポイント〉SecureRandom.urlsafe_base64は、ランダムな文字列を生成する

 ④ ゲストログインボタン（リンク）を配置する

  例）<%= link_to 'ゲストログイン', users_guest_sign_in_path, method: :post %>

 ※ プロフィール編集を行えないように設定する
  ・プロフィール編集画面のボタンを表示しない処理
   例）<% if user.name != "guestuser" %>

  ・URLに直接入力して編集画面へ遷移ができない処理
   例）before_action :ensure_guest_user, only: [:edit]
     def ensure_guest_user
       @user = User.find(params[:id])
       if @user.name == "guestuser"
         redirect_to ○○○_path(current_user.id)
       end
     end

グループ機能実装 ☆☆☆

 ① Groupモデル・GroupUserモデル（中間テーブル）を作成

 〈ポイント〉Groupモデルのカラムは”name”と”introduction”と”owner_id（グループオーナー）”
 〈ポイント〉GroupUserモデル（中間テーブル）のカラムは”user_id”と”group_id”

《イメージ図》
￼

 ②各モデルにアソシエーションを設定
  ⑴ Userモデル内ではGroupテーブルとGroupUser中間テーブルに対するアソシエーションを記載
   例）has_many :group_users, dependent: :destroy
     has_many :groups, through: :group_users

 〈ポイント〉中間テーブルを通して繋がっているものには、 through: :group_users（中間テーブル名）のkeyをつける
 〈ポイント〉through: ○○○（中間テーブル名）は複数形

  ⑵ Groupモデル内ではUserテーブルとGroupUser中間テーブルに対するアソシエーションを記載
   例）has_many :group_users, dependent: :destroy
     has_many :users, through: :group_users
     belongs_to :owner, class_name: "User", foreign_key: :owner_id

 〈ポイント〉Groupモデルには多対多のためのアソシエーションに加えて、Group作成者カラム（owner_id）のためのアソシエーションを設定する
   メモ：グループの作成者（owner）は１人なので、group (子)とowner (親)は belongs_toの関係である
      ownerテーブルがあればいいのだが、ownerは結局はuserと同じなため、userテーブルを利用するけれども、テーブルの名前をuserではなくownerと読み替えさせるようにする
      ⇒ belongs_to :自分で設定するテーブルの読み方, class_name: "元となるモデル名", foreign_key: :owner_id

  ⑶ GroupUserモデルには以下を記載
   例）belongs_to :user
     belongs_to :group

 ③ routesファイルにルーティングを定義

 ④ groupsコントローラーファイルの作成&編集
  ・new, create, index, show, edit, updateアクションを定義する

 〈ポイント〉作成した人がグループオーナーとなる設定をする
   createアクションの際、owner_idカラムにcurrent_user.idを代入する
    例）@group.owner_id = current_user.id

 ⑤ Viewファイルの作成&編集
  ・new, index, show, editファイルを作成する

 ⑥ グループに参加する/ グループから退出する 機能の作成    ※いいね機能と同様の実装方法
  ⑴ routesファイルにルーティングを定義
   ・groupにネストさせる

  ⑵ group_usersコントローラーファイルの作成&編集

  ⑶ Viewファイルの編集
   ・各ページにメンバー数/メンバーの名前を表示、グループに参加する/ グループから退出する ボタンを作成

 〔注意〕グループ作成者がグループメンバーに含まれるよう、groupsコントローラーファイルに下記を追記する！

   例）@group.users << current.user


メール送信機能実装 ☆☆

 ① Action Mailerを導入する
  ・ rails generate mailer ContactMailer（任意の名称）を実行
   → mailerフォルダに、contact_mailer.rbファイルが生成される

 ② サーバーを設定する
  ・config/environments/development.rbにメール送信設定を記載（最下部）する

     config.action_mailer.raise_delivery_errors = true
     config.action_mailer.delivery_method = :smtp
     config.action_mailer.smtp_settings = {
       port:                     587,
       address:              'smtp.gmail.com',
       domain:               'gmail.com',
       user_name:         'メルアド',     ← 自分Gmailのアドレス
       password:           'アプリパスワード', ← 自分のGmailのアプリパスワード
       authentication:   'login',
       enable_starttls_auto: true
     }

 ③ mailerファイルを編集
  ・application_mailerファイルに以下を記載する

    default from: 'from@example.com'
    layout 'mailer'

  〈ポイント〉application_mailerファイルは、全メーラー共通の設定ができるファイル ＝contollerのメール版？


 ⑤ メール送信用のページを作成する ※ここではevent_noticesとする
  ⑴ routesファイルにルーティングを定義
   ・groupsルートにネストさせる
   ・アクションはnew, createのみでOK

  ⑵ event_noticesコントローラーファイルの作成&編集
   ・newアクションを記載する
   ・createアクションを記載する

   〈ポイント〉⑶のform_withで設定した各変数（メールタイトル・メール本文）をparamsで受け取り、それぞれインスタンス変数へ格納
   〈ポイント〉メンバー全員にメールを送るため、@group = Group.find(params[:group_id])→@group.usersでメンバー情報を取得する
   〈ポイント〉メールタイトル、本文、メンバー情報を、Action Mailerで導入したmailerファイルのsend_mailアクションへわたす

   例）    ContactMailer.send_mail(@mail_title, @mail_content,group_users).deliver
       ※deliverメソッドは、メーラーを起動して返ってきたメールのデータを送信する

   〈ポイント〉render で、sent ファイル（送信完了画面）に飛ばす

  ⑶ Viewファイルの作成&編集 ※サーチ機能実装方法と同様の流れ
   ・newファイル（メール作成画面）を作成する

   〈ポイント〉form_with url: 〇〇○（パス名）,model: :create 構文で、createルートに繋げる
   〈ポイント〉f.text_△△△:×××で、「メールタイトル」「メール本文」を変数？に格納する

   ・sent ファイル（送信完了画面）を作成する

  ⑷ mailerファイルの編集
   ・Action Mailerで導入したmailerファイル（ここではcontact_mailer.rb）を編集する
   ・⑵で記載したsend_mailメソッドを定義する ＝＞ 受け取った値をテキストファイルに渡し、メールを送信する

        def send_mail(mail_title,mail_content,group_users) #メソッドに対して引数を設定
          @mail_title = mail_title
          @mail_content = mail_content
          mail bcc: group_users.pluck(:email), subject: mail_title
        end

   〈ポイント〉send_mailメソッドで受け取った引数（メールタイトル・本文）をインスタンス変数へ格納する＋タイトルをsubject: に渡す
   〈ポイント〉send_mailメソッドで受け取った引数（メンバー情報）をpluck メソッドでEmail情報 を抜き出し、bcc: に渡す
          ※モデル名.pluck(カラム名）＝＞ 指定したモデルカラム情報全てを配列で返す

  ⑸ メール本文を作成する（メーラーのView画面を作成）
   ・app/views/contact_mailerディレクトリ下にsend_mail.text.erb（テキストファイル）を作成

    =========================================
     New event from <%= @group.name %>!!
    =========================================
     Title: <%= @title %>
     Details:<%= @body %>

 〔注意〕development.rbにはメールアドレスと、アプリパスワードが記載されているため、githubにそのままプッシュしてはいけない
     ⇒ dotenvを導入して環境変数を設定する！


Rubocopの実装&解析 ☆

 Rubucopとは‥‥コーディング規約に遵守されているかチェックを行う、コード解析ツール

 ① Rubucopをインストールする
   ⑴「Gemfile」のdevelopmentグループに以下を追記
   group :development do
   :
   :
     gem 'rubocop', require: false
     gem 'rubocop-performance', require: false
     gem 'rubocop-rails', require: false
     gem 'rubocop-minitest', require: false
     gem 'rubocop-packaging', require: false
     gem 'rubocop-rspec'
   end
  ⑵ bundle install を実行

 ② Rubocop設定ファイルの作成
      bundle exec rubocop --auto-gen-config を実行 → rubocop.ymlファイルを生成&編集
   ※.rubocop.ymlに追記する内容が多いため、ここでは割愛（https://web-camp.online/lesson/curriculums/275/contents/1533）

 ③ Rubocopの解析
   bundle exec rubocop を実行
   〈ポイント〉
    ・ Inspecting ‥‥ 解析したファイル数
    ・ Offenses   ‥‥ コーディング違反箇所
    ・ 解析の実行コマンドに-aのオプションをつけた場合、コーディング違反を修正してくれる！

  ■ ファイル単位で解析する場合
    username:~/environment/アプリケーション名 $ bundle exec rubocop -a {解析対象ファイル}
  ■ フォルダ単位で解析する場合
    username:~/environment/アプリケーション名 $ bundle exec rubocop -a {解析対象フォルダ}



バッチ処理 ☆

 「バッチ」とは‥‥“一定量の(あるいは一定期間の)データを集め、プログラムによる一括処理するための処理方法”

 バッチ処理の実装方法（投稿したデータを2分おきに全て削除するバッチ処理を実装する場合）

  ⑴ 削除プログラムを作成
   ⅰ.  app/libの配下にbatchフォルダを作成。 ※app/libではない？
   ⅱ. batchフォルダの中にdata_reset.rbファイルを作成&以下を記述して保存。

    class Batch::DataReset
      def self.data_reset
        Book.delete_all
        p "投稿を全て削除しました"
      end
    end

   ⅲ. config/application.rbに以下を追記 ← 作成したapp/lib/batch/data_reset.rbが読み込まれる。

    class Application < Rails::Application
      :
      config.paths.add 'lib', eager_load: true ← 基本この行だけ追記！
    end

  ⑵ cron（クーロン）を使用しての自動化設定

   「cron（クーロン）」とは‥‥定期的に指定のプログラムを実行するためのスケジューラー

   ⅰ. cronの状態確認
      sudo systemctl status crondを実行  → Active: active (running)…の表記があれば、cronは常駐プログラムとして起動している。

   ⅱ. crontab※ に実行内容を登録 ※crontabはcronに実行してもらう設定を編集するための管理コマンド
       crontab -e を実行 → 登録 → 保存
     ※登録内容は様々なため、ここでは割愛

   ⅲ. cronを起動
       sudo systemctl restart crond を実行

    ※確認が終わったら、必ずcronを停止する
     sudo systemctl stop crond を実行



doting-rails（ドットエンブ） ☆☆

 「dotenv」とは‥‥環境変数を管理する事が出来るgem → 環境変数として指定した変数はGithubなどにアップロードされない


 ① dotenvをインストールする
   「Gemfile」の最終行に gem ”doting-rails” を追記 → bundle install を実行

 ② アプリケーション直下に、.envファイルを作成

 ③ .envファイルに環境変数の記述
  〈ポイント〉SECRET_KEY=○○○  の形で記述
  〈ポイント〉環境変数設定後の確認方法
    ⑴ rails cを実行
    ⑵ ENV['SECRET_KEY’]を実行

 ④ 使用方法 ＝ ソースコード内で環境変数を使用する
  〈ポイント〉ファイルには env[’SECRET_KEY’]  の形で記述！

 ⑤ .gitignoreに.envを追加する
  〈ポイント〉Gitの管理下に置きたくないファイルやフォルダは.gitignoreファイルに記載
    例）.gitignoreファイルの最終行に/.envと入力して保存

ページネーションの追加 ★
 ※参考サイト：https://qiita.com/japwork/items/33c02de511b7db212e55


created_atを日本時間で表示する ★
 ※参考サイト：https://qiita.com/tomo_k09/items/e4f19947d35890500492


プルダウンメニュー作成 ★
 ※参考サイト：https://zenn.dev/yusuke_docha/articles/89b49fd29c16c6
